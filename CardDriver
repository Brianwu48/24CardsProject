import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.List;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class CardDriver extends Application {

	protected static ImageView card1;
	protected static ImageView card2;
	protected static ImageView card3;
	protected static ImageView card4;

	public static void main(String[] args) {

		launch(args);
	}

	public void start(Stage Game) throws Exception {

		Label Time = new Label();

		Button fSolution = new Button("Solution");
		fSolution.setLayoutX(150);
		fSolution.setLayoutY(80);
		fSolution.setMinSize(175, 50);

		Label ansLbl = new Label();
		ansLbl.setLayoutX(400);
		ansLbl.setLayoutY(80);
		ansLbl.setMinSize(175, 50);

		Button refresh = new Button("Refresh");
		refresh.setLayoutX(675);
		refresh.setLayoutY(80);
		refresh.setMinSize(175, 50);

		refresh.setOnAction(value -> {
			List<Integer> Cards = new ArrayList<>();
			Cards.removeAll(Cards);
			Cards.addAll(GenerateCards.GetCards()); // Using Generate card class to get RNG cards, transfered onto an
													// arrayList to be used by the Image Generator

			int Num[] = new int[4];

			FileWriter fileWriter = null;
			try {
				fileWriter = new FileWriter("cards.txt", true);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			PrintWriter printWriter = new PrintWriter(fileWriter);

			for (int i = 0; i < 4; i++) // For Loops, individually test each card using the ImageGenerator Class to
										// display in GUI
			{
				ImageGenerator.imageSet(Cards.get(i), i);
				Num[i] = GenerateCards.CardTranslator(Cards.get(i));
				System.out.println(Num[i]);
				printWriter.println("Card " + (i + 1) + ": " + Num[i]);

			}
			;
			printWriter.println(" ");
			printWriter.close();
		});

		Button verify = new Button("Verify");
		verify.setLayoutX(675);
		verify.setLayoutY(520);
		verify.setMinSize(175, 50);

		Text direction = new Text("Enter an Expression: ");
		direction.setLayoutX(150);
		direction.setLayoutY(551);

		Text solution = new Text();
		direction.setLayoutX(150);
		direction.setLayoutY(551);

		TextField input = new TextField();
		input.setLayoutX(400);
		input.setLayoutY(520);
		input.setMinSize(175, 50);

		verify.setOnAction(value -> {
			System.out.println(Calculator.evaluatePostfix(Calculator.infixToPostfix(input.getText())));
			ansLbl.setText(input.getText() + " = "
					+ Integer.toString(Calculator.evaluatePostfix(Calculator.infixToPostfix(input.getText()))));

			FileWriter fileWriter = null;
			try {
				fileWriter = new FileWriter("log.txt", true);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			PrintWriter printWriter = new PrintWriter(fileWriter);

			printWriter.print("User Input: " + input.getText());
			printWriter.print(" | Answer" + Calculator.evaluatePostfix(Calculator.infixToPostfix(input.getText())));

			printWriter.close();

		});

		card1 = new ImageView();
		card1.setLayoutX(14);
		card1.setLayoutY(150);
		card1.setFitWidth(222);
		card1.setFitHeight(323);

		card2 = new ImageView();
		card2.setLayoutX(261);
		card2.setLayoutY(150);
		card2.setFitWidth(222);
		card2.setFitHeight(323);

		card3 = new ImageView();
		card3.setLayoutX(518);
		card3.setLayoutY(150);
		card3.setFitWidth(222);
		card3.setFitHeight(323);

		card4 = new ImageView();
		card4.setLayoutX(761);
		card4.setLayoutY(150);
		card4.setFitWidth(222);
		card4.setFitHeight(323);

		Group GUI = new Group(fSolution, ansLbl, solution, refresh, verify, direction, input, card1, card2, card3,
				card4);
		Scene sn = new Scene(GUI, 1000, 600);
		Game.setTitle("Cards 24");
		Game.setScene(sn);
		Game.show();

	}

}
